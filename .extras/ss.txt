
    /* if (data) {
      if (startQuiz) {
        try {
          // setQuestionObj({ ...data.value[0] });
          // setIndexOfQuestion(indOfQues.current.state);

          (async () => await indOfQues.current.set({ ...data.value[0] }))();
          // (async () => await toggleLiveState.current.set(true))();
          // intervals();

          // (async () => await toggleLiveState.current.set(true))();
        } catch (error) {
          console.error(
            "error occurred in setting the fluid container \n",
            error
          );
        }
      } else {
        // setQuestionObj(null);
        setIndexOfQuestion(0);
        // setAnsArr([]); // !not possible as this will only effect for organiser

        (async () => await indOfQues.current?.set(null))();
        // (async () => await toggleLiveState.current.set(false))();
        // clearIntervals();
      }
    } */

    

/* const changeInitialCss = (e) => {
  e.target.style.opacity = "0.4";
  // e.target.style.backgroundColor =
  //   themeString === "default"
  //     ? "#DEDEDE"
  //     : "#3D3D3D";
};

const backToInitialCss = (e) => {
  e.target.style.opacity = "1";
  // e.target.style.backgroundColor = "inherit";
}; */

  /* const handleOnDragEnter = (e) => {
    e.preventDefault();
    const idOfQues = e.dataTransfer.getData("idOfQues");
    console.log("handleOnDragEnter", idOfQues);
    changeInitialCss(e);
  };

  const handleOnDragLeave = (e) => {
    e.preventDefault();
    const idOfQues = e.dataTransfer.getData("idOfQues");
    console.log("handleOnDragLeave", idOfQues);
    backToInitialCss(e);
  };

  const handleOnDragOver = (e) => {
    e.preventDefault();
    const idOfQues = e.dataTransfer.getData("idOfQues");
    console.log("handleOnDragOver", idOfQues);
  };

  const handleOnDrop = (e) => {
    e.preventDefault();
    const idOfQues = e.dataTransfer.getData("idOfQues");
    console.log("handleOnDrop", idOfQues);
    backToInitialCss(e);
  }; */

  <>
                                                {/* <Tooltip
                                                  withArrow
                                                  content="Edit this Question"
                                                  positioning="after"
                                                >
                                                  <Button
                                                    // className="cursor-drag-btn"
                                                    appearance="transparent"
                                                    icon={<Edit20Regular />}
                                                    onClick={(e) =>
                                                      setSelectedQuesForEdit(
                                                        valObj
                                                      )
                                                    }
                                                  />
                                                </Tooltip> */}
                                              </>
